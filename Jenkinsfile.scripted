@Library('team-shared-lib') _

node('docker') {

    env.JAVA_HOME = "C:\\Program Files\\Eclipse Adoptium\\jdk-17.0.16.8-hotspot"
    env.PATH = "${env.JAVA_HOME}\\bin;${env.PATH}"

    def mvnHome = "F:\\ITI\\CI-CD\\day2\\apache-maven-3.9.11"

    properties([
        parameters([
            choice(name: 'ENV', choices: ['dev','staging','prod'], description: 'Target environment'),
            string(name: 'REGISTRY', defaultValue: 'docker.io', description: 'Docker registry host'),
            string(name: 'DOCKER_REPO', defaultValue: 'mohamedemad0o/mohamedemad_java-app', description: 'Repo path e.g. user/app'),
            string(name: 'IMAGE_TAG', defaultValue: '', description: 'Optional; empty => <branch>-<build_number>'),
            booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip unit tests?'),
            string(name: 'REPLICAS', defaultValue: '3', description: 'Demo for sharedlib bounds() (1..5)')
        ])
    ])

    def TAG = ''
    try {
        stage('Init & Checkout') {
            checkout scm
            stash name: 'src', includes: '**/*', useDefaultExcludes: false

            env.BRANCH_SLUG = env.BRANCH_NAME ?: 'main'
            env.BRANCH_SLUG = env.BRANCH_SLUG.replaceAll('/', '-')
            TAG = params.IMAGE_TAG?.trim() ?: "${env.BRANCH_SLUG}-${env.BUILD_NUMBER}"
            def bounded = bounds(value: params.REPLICAS as int, min: 1, max: 5)
            echo "ENV=${params.ENV} | TAG=${TAG} | REPLICAS bounded=${bounded}"
        }

        stage('Quality (parallel)') {
            parallel(
                Compile: {
                    dir('compile') {
                        unstash 'src'
                        bat "\"${mvnHome}\\bin\\mvn\" -B -DskipTests=true clean compile"
                    }
                },
                UnitTests: {
                    dir('tests') {
                        unstash 'src'
                        bat "\"${mvnHome}\\bin\\mvn\" -B -DskipTests=false test"
                        junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                    }
                }
            )
        }

        stage('Build JAR') {
            bat "\"${mvnHome}\\bin\\mvn\" -B -DskipTests=${params.SKIP_TESTS} clean package"
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }

        stage('Build & Push Docker') {
            bat "docker build --build-arg APP_ENV=${params.ENV} -t ${params.REGISTRY}/${params.DOCKER_REPO}:${TAG} ."

            withCredentials([usernamePassword(credentialsId: 'docker-hub-token', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_TOKEN')]) {
                bat "echo %DOCKER_TOKEN% | docker login -u %DOCKER_USER% --password-stdin ${params.REGISTRY}"
                bat "docker push ${params.REGISTRY}/${params.DOCKER_REPO}:${TAG}"
            }
        }
    } finally {
        bat "docker logout ${params.REGISTRY} || exit 0"
        bat "docker image prune -f || exit 0"
        bat "docker rmi ${params.REGISTRY}/${params.DOCKER_REPO}:${TAG} || exit 0"
        cleanWs()
    }
}
